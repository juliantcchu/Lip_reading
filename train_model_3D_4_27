import keras
from keras.models import model_from_json, load_model
import pickle
import numpy as np
import random


epochs = 50
batch_size = 4
num_classes = 23

file = open("Combined_data_for_training.sav", "rb")
data_2 = pickle.load(file)
X_2 = data_2['values'].reshape(-1, 40, 100, 100, 1)

def find_class(text):
    class_names = ["ba", "bu", "en", "fu", "ge", "hao", "jia", "ke", "kou", "lu", "ma", "mi", "ni", "shi", "shi2", "shu", "ta", "tong", "wo", "xi", "xie", "yau", "yun"]
    return class_names.index(text)
    
y_2 = []
for i in data_2['target']:
    y_2.append(find_class(i))

file = open("X_raw_train.pickle", "rb")
X_1=pickle.load(file)
file = open("y_train.pickle", "rb")
y_1=pickle.load(file)

X = np.concatenate((X_1, X_2))
y = y_1+y_2
y = keras.utils.to_categorical(y, num_classes)

X_d = np.subtract(X, X//2)
X_b = np.add(X, (255-X)//2)
X = np.concatenate((X, X_d, X_b))
y = y+y+y

dataset = []
for i in range(len(y)):
    dataset.append([X[i], y[i]])
random.shuffle(dataset)
X = []
y = []
for a, b in dataset:
    X.append(a)
    y.append(b)
X = np.array(X)

model = load_model("3DCNN_LSTM_64kernels.h5")

model.fit(X, y, batch_size=batch_size, epochs=epochs, validation_split=0.1)

model.save("3DCNN_LSTM_64kernels_full_data.h5")
