import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Reshape
from keras.layers import Conv3D, MaxPooling3D, Conv2D, MaxPooling2D
from keras.layers import LSTM
from keras import backend as K
import numpy as np
import pickle

file1 = open("X_1.pickle", "rb")
file2 = open("X_2.pickle", "rb")
file3 = open("X_3.pickle", "rb")

file4 = open("y_1.pickle", "rb")
file5 = open("y_2.pickle", "rb")
file6 = open("y_3.pickle", "rb")

x1 = pickle.load("X_1.pickle")
x2 = pickle.load("X_2.pickle")
x3 = pickle.load("X_3.pickle")

y1 = pickle.load("y_1.pickle")
y2 = pickle.load("y_2.pickle")
y3 = pickle.load("y_3.pickle")

x1 = np.array(x1).reshape(-1, 40, 100, 100, 1)
x2 = np.array(x2).reshape(-1, 40, 100, 100, 1)
x3 = np.array(x3).reshape(-1, 40, 100, 100, 1)

X = np.concatenate((x1, x2, x3))

y = y1 + y2 + y3



import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Reshape
from keras.layers import Conv3D, MaxPooling3D, Conv2D, MaxPooling2D
from keras.layers import LSTM
from keras import backend as K
import numpy as np


batch_size = 4
num_classes = 23
epochs = 50
# convert class vectors to binary class matrices
y = keras.utils.to_categorical(y, num_classes)


print("building model... ")
model = Sequential()

model.add(Conv3D(128, (3, 3, 3), activation = "relu", padding="same"))
model.add(MaxPooling3D((1, 2, 2)))
model.add(Conv3D(128, (3, 3, 3), activation = "relu", padding="same"))
model.add(MaxPooling3D((1, 2, 2)))

model.add(Reshape((40, -1)))
model.add(LSTM(256, return_sequences=True, input_shape=(40, -1)))

model.add(Flatten())
model.add(Dense(num_classes, activation = "softmax"))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adam(lr=0.0001),
              metrics=['accuracy'])

model.fit(X, y, batch_size=batch_size, epochs=epochs, validation_split=0.1)
model.save("LSTM_3DCNN_pixel_final.h5")
print("...saved!")
